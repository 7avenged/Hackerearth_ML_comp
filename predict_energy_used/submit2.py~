import numpy as np 
import pandas as pd 
from sklearn import svm
from tqdm import tqdm
from sklearn import tree
from sklearn.naive_bayes import GaussianNB							
from sklearn.gaussian_process import GaussianProcessClassifier
import csv
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.metrics import accuracy_score
from sklearn.ensemble import GradientBoostingClassifier #For Classification
import xgboost as xgb
from xgboost.sklearn import XGBClassifier
#######################################################################################################


#########################################################################################################    




#head12 = ["PassengerId","Pclass", "Age", "SibSp", "Parch",  "Fare","Survived"]
df = pd.read_csv('train.csv') #usecols = head12
df2 = pd.read_csv('test.csv') #usecols = head12
#df = df.fillna(method='ffill')

#df['Age'] = df['Age'].replace(r'\s+', np.nan, regex=True)
#df['Age'] = df['Age'].fillna(0)

y1 = df.Energy
y2 = np.column_stack( y1 )
y3 = y2.T
y3 = y3.ravel()
#y = y2.reshape( (1,len(y2) ) )
#print(y)
#X1 = [df.IFATHER,	df.NRCH17_2,	df.IRHHSIZ2	,df.IIHHSIZ2,	df.IRKI17_2,	df.IIKI17_2,	df.IRHH65_2	,df.IIHH65_2,	df.PRXRETRY,	df.PRXYDATA,	df.MEDICARE,	df.CAIDCHIP,	df.CHAMPUS,	df.PRVHLTIN,	df.GRPHLTIN,	df.HLTINNOS,	df.HLCNOTYR,	df.HLCNOTMO,	df.HLCLAST,	df.HLLOSRSN,	df.HLNVCOST,	df.HLNVOFFR,	df.HLNVREF,	df.HLNVNEED,	df.HLNVSOR,	df.IRMCDCHP,	df.IIMCDCHP,	df.IRMEDICR,	df.IIMEDICR,	df.IRCHMPUS,	df.IICHMPUS,	df.IRPRVHLT,	df.IIPRVHLT,	df.IROTHHLT,	df.IIOTHHLT,	df.HLCALLFG,	df.HLCALL99,	df.ANYHLTI2,	df.IRINSUR4,	df.IIINSUR4,	df.OTHINS,	df.CELLNOTCL,	df.CELLWRKNG,	df.IRFAMSOC,	df.IIFAMSOC,	df.IRFAMSSI,	df.IIFAMSSI,	df.IRFSTAMP,	df.IIFSTAMP,	df.IRFAMPMT,	df.IIFAMPMT,	df.IRFAMSVC,	df.IIFAMSVC,	df.IRWELMOS,	df.IIWELMOS,	df.IRPINC3,	df.IRFAMIN3,	df.IIPINC3,	df.IIFAMIN3,	df.GOVTPROG,	df.POVERTY3,	df.TOOLONG,	df.TROUBUND,	df.PDEN10,	df.COUTYP2,	df.MAIIN102,	df.AIIND102,	df.ANALWT_C,	df.VESTR,	df.VEREP ]

#X2 = [df2.IFATHER,	df2.NRCH17_2,	df2.IRHHSIZ2	,df2.IIHHSIZ2,	df2.IRKI17_2,	df2.IIKI17_2,	df2.IRHH65_2	,df2.IIHH65_2,	df2.PRXRETRY,	df2.PRXYDATA,	df2.MEDICARE,	df2.CAIDCHIP,	df2.CHAMPUS,	df2.PRVHLTIN,	df2.GRPHLTIN,	df2.HLTINNOS,	df2.HLCNOTYR,	df2.HLCNOTMO,	df2.HLCLAST,	df2.HLLOSRSN,	df2.HLNVCOST,	df2.HLNVOFFR,	df2.HLNVREF,	df2.HLNVNEED,	df2.HLNVSOR,	df2.IRMCDCHP,	df2.IIMCDCHP,	df2.IRMEDICR,	df2.IIMEDICR,	df2.IRCHMPUS,	df2.IICHMPUS,	df2.IRPRVHLT,	df2.IIPRVHLT,	df2.IROTHHLT,	df2.IIOTHHLT,	df2.HLCALLFG,	df2.HLCALL99,	df2.ANYHLTI2,	df2.IRINSUR4,	df2.IIINSUR4,	df2.OTHINS,	df2.CELLNOTCL,	df2.CELLWRKNG,	df2.IRFAMSOC,	df2.IIFAMSOC,	df2.IRFAMSSI,	df2.IIFAMSSI,	df2.IRFSTAMP,	df2.IIFSTAMP,	df2.IRFAMPMT,	df2.IIFAMPMT,	df2.IRFAMSVC,	df2.IIFAMSVC,	df2.IRWELMOS,	df2.IIWELMOS,	df2.IRPINC3,	df2.IRFAMIN3,	df2.IIPINC3,	df2.IIFAMIN3,	df2.GOVTPROG,	df2.POVERTY3,	df2.TOOLONG,	df2.TROUBUND,	df2.PDEN10,	df2.COUTYP2,	df2.MAIIN102,	df2.AIIND102,	df2.ANALWT_C,	df2.VESTR,	df2.VEREP ]

X1 = [ df.Observation,	df.T1,	df.RH_1,	df.T2,	df.RH_2,	df.T3,	df.RH_3,	df.T4,	df.RH_4,	df.T5,	df.RH_5,	df.T6	,df.RH_6,	df.T7,	df.RH_7,	df.T8,	df.RH_8,	df.T9,	df.RH_9,	df.T_out,	df.Press_mm_hg,	df.RH_out,	df.Windspeed,	df.Visibility,	df.Tdewpoint,	df.Energy]

X2 = [ df2.Observation,	df2.T1,	df2.RH_1,	df2.T2,	df2.RH_2,	df2.T3,	df2.RH_3,	df2.T4,	df2.RH_4,	df2.T5,	df2.RH_5,	df2.T6	,df2.RH_6,	df2.T7,	df2.RH_7,	df2.T8,	df2.RH_8,	df2.T9,	df2.RH_9,	df2.T_out,	df2.Press_mm_hg,	df2.RH_out,	df2.Windspeed,	df2.Visibility,	df2.Tdewpoint]


#X = [ [df.PassengerId],[df.Pclass], [df.Name], [df.Sex], [df.Age], [df.SibSp], [df.Parch], [df.Ticket], [df.Fare], [df.Cabin], [df.Embarked] ]
#X1 = [ df.PassengerId,df.Pclass, df.Age, df.SibSp, df.Parch,  df.Fare ]
#X = np.column_stack( (df.PassengerId),(df.Pclass), (df.Age), (df.SibSp), (df.Parch),  (df.Fare) )
#print('shape of X')
#print(X1 )
X = np.column_stack( X1 )
Xl = np.column_stack( X2 )
#X = np.asmatrix(X,float)
#df = df[~df['Age'].isnull()] 
#y3 = np.asmatrix(y3,float)
#np.isnan(X)
#np.where(np.isnan(X))
#np.nan_to_num(X)
#pd.DataFrame(X).fillna()



print(X.shape)
print(y3.shape)
#X = X.as_matrix().astype(np.float)
#print(df.isnull().any() )

#X = s vector which comprises of all the fearure columsn except survived one df[0]
  #the  column named survived in trian.csv file
#for i in tqdm(range(int(100000))):
clf = AdaBoostClassifier()
#clf1 =  GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1)
clf1 = XGBClassifier()
#clf = svm.SVC()
clf4 = tree.DecisionTreeClassifier()			#decision tree						                #simple SVM
#clf1 = GaussianNB() 					          #naive_bayes					
clf3 = GaussianProcessClassifier() 
b = clf.fit(X,y3)
h = clf4.fit(X,y3)
clf1 = clf1.fit(X,y3)

#Xtest = s vector which comprises of all the fearure columsn except survived one df[0]

#csvfile = open('output.csv', 'wb') #open file for operation
#writer = csv.writer(csvfile) 
#df1 = pd.read_csv('test.csv')

#df1.Age = df1.Age.replace(r'\s+', np.nan, regex=True)
#df1.Age = df1.Age.fillna(0)

#Xtest = np.array[[df.PassengerId,df.Pclass, df.Name, df.Sex, df.Age, df.SibSp, df.Parch, df.Ticket, df.Fare, df.Cabin, df.Embarked]]
#Xtest = [ df.PassengerId,df.Pclass, df.Age, df.SibSp, df.Parch,  df.Fare ]
#Xtest1 = [df1.PassengerId,df1.Pclass, df1.Age, df1.SibSp, df1.Parch,  df1.Fare]
#Xtest = np.column_stack( (Xtest1) )

c = clf.predict(Xl)
c1 = clf1.predict(Xl)
l = clf4.predict(X)
#c = c.ravel()
c = c.T
#print(c )
#k = len(c)
#print(df.PassengerId)
#now write column C to a csv file with passenger ID and vector c on the other column
#header1 = ["PassengerId", c]
#for i in k :
#writer.writerow([df.PassengerId,c]) 

#csvfile.close()

df3 = pd.DataFrame({"observation" : df2.Observation, "Energy" :c1})

df3.to_csv("output0.csv", index=False)

#print("adaboost:")
#print(accuracy_score(y3, c, normalize=True) )
#print("xg:")
#print(accuracy_score(y3, c1, normalize=True) )
